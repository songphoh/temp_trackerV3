// Enhanced main.js - ‡πÄ‡∏û‡∏¥‡πà‡∏° Mobile Performance
// ‡πÄ‡∏Å‡πá‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏ß‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô optimization

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î URL ‡∏Ç‡∏≠‡∏á API
var scripturl = '/api';
var owner = '‡∏á‡∏≤‡∏ô‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏®' + '\n' + '‡∏≠‡∏ö‡∏ï.‡∏Ç‡πà‡∏≤‡πÉ‡∏´‡∏ç‡πà';

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏û‡∏¥‡∏Å‡∏±‡∏î
var profile = null;
var gps;
var locationPermissionGranted = false;

// ‚≠ê ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö mobile performance
var mobilePerf = {
  apiCache: new Map(),
  requestQueue: [],
  isProcessing: false,
  retryCount: 0,
  maxRetries: 3
};

// ‚≠ê Performance-optimized API call
function optimizedAjax(options) {
  return new Promise((resolve, reject) => {
    // Check cache first
    const cacheKey = `${options.method || 'GET'}:${options.url}:${JSON.stringify(options.data || {})}`;
    const cached = mobilePerf.apiCache.get(cacheKey);
    
    if (cached && (Date.now() - cached.timestamp) < 30000) { // 30 second cache
      console.log('üì± Using cached response for:', options.url);
      resolve(cached.data);
      return;
    }

    // Add timeout and retry logic
    const originalSuccess = options.success;
    const originalError = options.error;
    
    options.timeout = options.timeout || 10000; // 10 second timeout
    
    options.success = function(data) {
      // Cache successful responses
      if (data && typeof data === 'object') {
        mobilePerf.apiCache.set(cacheKey, {
          data: data,
          timestamp: Date.now()
        });
      }
      
      if (originalSuccess) originalSuccess(data);
      resolve(data);
    };
    
    options.error = function(xhr, status, error) {
      console.error('üì± API Error:', status, error);
      
      // Retry logic for network errors
      if (mobilePerf.retryCount < mobilePerf.maxRetries && 
          (status === 'timeout' || status === 'error')) {
        mobilePerf.retryCount++;
        console.log(`üì± Retrying API call (${mobilePerf.retryCount}/${mobilePerf.maxRetries}):`, options.url);
        
        setTimeout(() => {
          $.ajax(options);
        }, 1000 * mobilePerf.retryCount); // Exponential backoff
        return;
      }
      
      mobilePerf.retryCount = 0;
      if (originalError) originalError(xhr, status, error);
      reject(new Error(`${status}: ${error}`));
    };
    
    $.ajax(options);
  });
}

// ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à
$(document).ready(function () {
  console.log('üì± App starting...');
  
  // ‚≠ê ‡πÄ‡∏£‡∏¥‡πà‡∏° performance monitoring
  if (typeof MobilePerformanceMonitor !== 'undefined') {
    window.perfMonitor = new MobilePerformanceMonitor();
  }
  
  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏°
  $('#clockin').click(() => requestLocationAndClockIn());
  $('#clockout').click(() => requestLocationAndClockOut());
  
  // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤
  showTime();
  
  // ‚≠ê ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á GPS ‡πÅ‡∏ö‡∏ö non-blocking
  if (typeof requestIdleCallback !== 'undefined') {
    requestIdleCallback(() => {
      getlocation(false);
    });
  } else {
    setTimeout(() => {
      getlocation(false);
    }, 100);
  }

  // ‡∏î‡∏∂‡∏á LIFF ID ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  optimizedAjax({
    method: "GET",
    url: "/api/getLiffId",
    success: function(response) {
      if (response && response.liffId) {
        initializeLiff(response.liffId);
      } else {
        console.error("‡πÑ‡∏°‡πà‡∏û‡∏ö LIFF ID ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
        $('#message').html("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö LINE ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö");
        document.getElementById('message').className = 'alert alert-danger';
      }
    },
    error: function(error) {
      console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á LIFF ID", error);
      $('#message').html("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á");
      document.getElementById('message').className = 'alert alert-danger';
    }
  });
});

// ‚≠ê Optimized LIFF initialization
function initializeLiff(liffId) {
  console.log("üì± ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô LIFF ‡∏î‡πâ‡∏ß‡∏¢ ID:", liffId);
  
  // Show loading state
  if (typeof MobileUI !== 'undefined') {
    const loaderId = MobileUI.loading.show('loading', '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ LINE...');
    
    setTimeout(() => {
      MobileUI.loading.hide(loaderId);
    }, 5000); // Hide after 5 seconds max
  }
  
  liff.init({
    liffId: liffId,
    withLoginOnExternalBrowser: true
  }).then(() => {
    console.log("üì± LIFF initialized successfully");
    
    if (!liff.isLoggedIn()) {
      console.log("üì± User not logged in, triggering login");
      liff.login();
      return;
    }
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
    liff.getProfile().then(userProfile => {
      profile = userProfile;
      console.log("üì± Profile loaded:", profile.displayName);
      
      // Show success toast
      if (typeof MobileUI !== 'undefined') {
        MobileUI.toast.success(`‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö ${profile.displayName}`);
      }
      
      initApp();
    }).catch(err => {
      console.error("üì± Error getting profile:", err);
      initApp();
    });
  }).catch(err => {
    console.error("üì± LIFF initialization failed", err);
    $('#message').html("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö LINE ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö");
    document.getElementById('message').className = 'alert alert-danger';
    
    if (typeof MobileUI !== 'undefined') {
      MobileUI.toast.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ LINE ‡πÑ‡∏î‡πâ");
    }
    
    initApp();
  });
}

// ‚≠ê Optimized app initialization
function initApp() {
  console.log('üì± Initializing app...');
  
  document.getElementById('message').innerText = owner;
  document.getElementById('message').className = 'alert msgBg';
  
  // ‚≠ê Load employees with better error handling
  loadEmployeesOptimized();
}

// ‚≠ê Optimized employee loading
function loadEmployeesOptimized() {
  const loadingToast = typeof MobileUI !== 'undefined' ? 
    MobileUI.toast.loading('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô...') : null;
  
  Promise.all([
    optimizedAjax({
      method: "POST",
      url: scripturl + "/getdata",
      data: {},
      timeout: 8000
    }),
    optimizedAjax({
      method: "POST", 
      url: scripturl + "/getemployee",
      data: {},
      timeout: 8000
    })
  ]).then(([autocompleteData, employeeList]) => {
    // Hide loading toast
    if (loadingToast && typeof MobileUI !== 'undefined') {
      MobileUI.toast.hide(loadingToast);
    }
    
    // Setup autocomplete
    if (autocompleteData && Array.isArray(autocompleteData)) {
      setupAutocomplete(autocompleteData);
    }
    
    // Setup employee dropdown (keeping compatibility)
    if (employeeList && Array.isArray(employeeList)) {
      setupEmployeeDropdown(employeeList);
    }
    
    console.log(`üì± Loaded ${autocompleteData?.length || 0} employees for autocomplete`);
    
    if (typeof MobileUI !== 'undefined') {
      MobileUI.toast.success('‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
    }
    
  }).catch(error => {
    console.error('üì± Failed to load employees:', error);
    
    if (loadingToast && typeof MobileUI !== 'undefined') {
      MobileUI.toast.hide(loadingToast);
      MobileUI.toast.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ');
    }
    
    // Try to use cached data
    const cachedData = mobilePerf.apiCache.get('POST:/api/getdata:{}');
    if (cachedData) {
      console.log('üì± Using cached employee data');
      setupAutocomplete(cachedData.data);
    }
  });
}

// ‚≠ê Setup autocomplete with mobile optimization
function setupAutocomplete(dataPerson) {
  $(function () {
    $("#employee, #employee-input").autocomplete({
      maxShowItems: 5, // Reduce for mobile
      source: dataPerson,
      minLength: 2,
      delay: 300, // Add delay to reduce API calls
      select: function(event, ui) {
        // Trigger custom event for mobile handlers
        if (typeof CustomEvent !== 'undefined') {
          const employeeSelectedEvent = new CustomEvent('employee-selected', {
            detail: {
              name: ui.item.value,
              code: ui.item.value,
              selectionTime: Date.now(),
              method: 'click'
            }
          });
          document.dispatchEvent(employeeSelectedEvent);
        }
      }
    });
  });
}

// ‚≠ê Setup employee dropdown (compatibility)
function setupEmployeeDropdown(employeeList) {
  const employeeSelect = document.getElementById("employee");
  if (!employeeSelect) return;

  // Clear existing options
  employeeSelect.innerHTML = '';

  let option = document.createElement("option");
  option.value = "";
  option.text = "";
  employeeSelect.appendChild(option);

  employeeList.forEach(function (item, index) {
    let option = document.createElement("option");
    option.value = item[0];
    option.text = item[0];
    employeeSelect.appendChild(option);
  });
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏Ñ‡∏•‡πÄ‡∏≠‡πá‡∏ô‡∏ï‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏î‡∏µ‡∏ö‡∏±‡πä‡∏Å (‡πÄ‡∏î‡∏¥‡∏°)
function getClientTime() {
  var currentTime = new Date();
  var isoString = currentTime.toISOString();
 
  console.group('Client Time Debugging');
  console.log('Original Time (Local):', currentTime);
  console.log('Original Time (ISO):', isoString);
  console.log('Timezone Offset:', 
    -currentTime.getTimezoneOffset(), 
    'minutes (Difference from UTC)'
  );
  console.groupEnd();
 
  return isoString;
}

// ‚≠ê Enhanced location request with better UX
function requestLocationAndClockIn() {
  event.preventDefault();
  const employee = document.getElementById("employee").value;
  
  if (employee === '') {
    if (typeof MobileUI !== 'undefined') {
      MobileUI.toast.warning('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô');
    } else {
      $('#message').html('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ...!');
      document.getElementById('message').className = 'alert alert-warning text-danger';
    }
    return;
  }
  
  // Record performance metric
  const startTime = performance.now();
  
  showLocationPermissionDialog(function(allowed) {
    if (allowed) {
      const locationToast = typeof MobileUI !== 'undefined' ? 
        MobileUI.toast.loading('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á...') : null;
      
      getlocation(true, function(success) {
        if (locationToast && typeof MobileUI !== 'undefined') {
          MobileUI.toast.hide(locationToast);
        }
        
        if (success) {
          ClockIn();
        } else {
          if (typeof MobileUI !== 'undefined') {
            MobileUI.toast.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏î‡πâ');
          } else {
            $('#message').html('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÑ‡∏î‡πâ');
            document.getElementById('message').className = 'alert alert-danger';
          }
        }
        
        // Record performance
        const duration = performance.now() - startTime;
        if (typeof CustomEvent !== 'undefined') {
          window.dispatchEvent(new CustomEvent('clock-action', {
            detail: {
              type: 'clockin',
              success: success,
              duration: duration,
              offline: !navigator.onLine
            }
          }));
        }
      });
    } else {
      if (typeof MobileUI !== 'undefined') {
        MobileUI.toast.warning('‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¥‡∏Å‡∏±‡∏î');
      }
      
      setTimeout(function() {
        ClockIn();
      }, 1500);
    }
  });
}

// ‚≠ê Enhanced location request for clock out
function requestLocationAndClockOut() {
  event.preventDefault();
  const employee = document.getElementById("employee").value;
  
  if (employee === '') {
    if (typeof MobileUI !== 'undefined') {
      MobileUI.toast.warning('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô');
    } else {
      $('#message').html('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ...!');
      document.getElementById('message').className = 'alert alert-warning text-danger';
    }
    return;
  }
  
  const startTime = performance.now();
  
  showLocationPermissionDialog(function(allowed) {
    if (allowed) {
      const locationToast = typeof MobileUI !== 'undefined' ? 
        MobileUI.toast.loading('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á...') : null;
      
      getlocation(true, function(success) {
        if (locationToast && typeof MobileUI !== 'undefined') {
          MobileUI.toast.hide(locationToast);
        }
        
        if (success) {
          ClockOut();
        } else {
          if (typeof MobileUI !== 'undefined') {
            MobileUI.toast.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏î‡πâ');
          }
        }
        
        // Record performance
        const duration = performance.now() - startTime;
        if (typeof CustomEvent !== 'undefined') {
          window.dispatchEvent(new CustomEvent('clock-action', {
            detail: {
              type: 'clockout', 
              success: success,
              duration: duration,
              offline: !navigator.onLine
            }
          }));
        }
      });
    } else {
      if (typeof MobileUI !== 'undefined') {
        MobileUI.toast.warning('‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¥‡∏Å‡∏±‡∏î');
      }
      
      setTimeout(function() {
        ClockOut();
      }, 1500);
    }
  });
}

// ‚≠ê Enhanced location permission dialog
function showLocationPermissionDialog(callback) {
  if (locationPermissionGranted) {
    callback(true);
    return;
  }
  
  // ‡πÉ‡∏ä‡πâ mobile UI modal ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
  if (typeof MobileUI !== 'undefined') {
    const modal = document.createElement('div');
    modal.className = 'settings-modal';
    modal.innerHTML = `
      <div class="modal-overlay">
        <div class="modal-content">
          <div class="modal-header">
            <h3>üìç ‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á</h3>
          </div>
          <div class="modal-body">
            <div class="text-center mb-4">
              <div style="font-size: 64px; margin-bottom: 16px;">üìç</div>
            </div>
            <p class="text-center">‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤</p>
            <p class="text-center" style="font-size: 14px; color: #666;">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô</p>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" id="denyLocationBtn">
              ‚ùå ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï
            </button>
            <button type="button" class="btn btn-primary" id="allowLocationBtn">
              ‚úÖ ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï
            </button>
          </div>
        </div>
      </div>
    `;
    
    document.body.appendChild(modal);
    
    // Event handlers
    modal.querySelector('#allowLocationBtn').addEventListener('click', () => {
      locationPermissionGranted = true;
      document.body.removeChild(modal);
      callback(true);
    });
    
    modal.querySelector('#denyLocationBtn').addEventListener('click', () => {
      document.body.removeChild(modal);
      callback(false);
    });
    
    modal.querySelector('.modal-overlay').addEventListener('click', (e) => {
      if (e.target === modal.querySelector('.modal-overlay')) {
        document.body.removeChild(modal);
        callback(false);
      }
    });
    
    return;
  }
  
  // Fallback to original modal code
  var modalHtml = `
  <div class="modal fade" id="locationPermissionModal" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-dialog-centered" role="document">
      <div class="modal-content">
        <div class="modal-header bg-primary text-white">
          <h5 class="modal-title">üìç ‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á</h5>
        </div>
        <div class="modal-body">
          <div class="text-center mb-4">
            <div style="font-size: 64px;">üìç</div>
          </div>
          <p class="lead text-center">‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤</p>
          <p class="text-muted text-center">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô</p>
        </div>
        <div class="modal-footer justify-content-center">
          <button type="button" class="btn btn-secondary px-4" id="denyLocationBtn">
            ‚ùå ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï
          </button>
          <button type="button" class="btn btn-primary px-4" id="allowLocationBtn">
            ‚úÖ ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï
          </button>
        </div>
      </div>
    </div>
  </div>
  `;
  
  $('body').append(modalHtml);
  $('#locationPermissionModal').modal('show');
  
  $('#allowLocationBtn').on('click', function() {
    $('#locationPermissionModal').modal('hide');
    locationPermissionGranted = true;
    setTimeout(() => {
      $('#locationPermissionModal').remove();
      callback(true);
    }, 300);
  });
  
  $('#denyLocationBtn').on('click', function() {
    $('#locationPermissionModal').modal('hide');
    setTimeout(() => {
      $('#locationPermissionModal').remove();
      callback(false);
    }, 300);
  });
}

// ‚≠ê Enhanced ClockIn with better mobile UX
function ClockIn() {
  const employee = document.getElementById("employee").value;
  const userinfo = document.getElementById("userinfo").value;

  if (employee != '') {
    // Show mobile-friendly loading
    const loadingToast = typeof MobileUI !== 'undefined' ? 
      MobileUI.toast.loading('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤...') : null;
    
    if (!loadingToast) {
      $('#message').html("<span class='spinner-border spinner-border-sm text-primary'></span> ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà ...!");
    }
    
    const clientTime = getClientTime();
    
    const apiData = {
      employee,
      userinfo,
      lat: gps ? gps[0] : null,
      lon: gps ? gps[1] : null,
      client_time: clientTime
    };
    
    if (profile) {
      apiData.line_name = profile.displayName;
      apiData.line_picture = profile.pictureUrl;
    }
    
    console.group('üì± Clock In Request');
    console.log('API Data:', apiData);
    console.log('Network Status:', navigator.onLine ? 'Online' : 'Offline');
    console.groupEnd();
    
    optimizedAjax({
      method: 'POST',
      url: scripturl + "/clockin",
      data: apiData,
      timeout: 15000,
      success: function (res) {
        if (loadingToast && typeof MobileUI !== 'undefined') {
          MobileUI.toast.hide(loadingToast);
        }
        
        console.group('üì± Clock In Response');
        console.log('Server Response:', res);
        console.groupEnd();
        
        if (res.msg == 'SUCCESS') {
          const message = `${res.employee}<br>‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏°‡∏≤ ${res.return_date}`;
          
          if (typeof MobileUI !== 'undefined') {
            MobileUI.toast.success(`‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤ ${res.return_date} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`);
            
            // Update status display if available
            if (window.timeTrackerApp && window.timeTrackerApp.statusDisplay) {
              window.timeTrackerApp.updateEmployeeStatus(employee);
            }
          } else {
            $('#message').html(message);
            document.getElementById("message").className = "alert alert-primary";
          }
          
          clearForm();
          
          // Send notification
          if (profile) {
            optimizedAjax({
              method: 'POST',
              url: scripturl + "/sendnotify",
              data: {
                message: res.message,
                token: res.token,
                lat: gps ? gps[0] : null,
                lon: gps ? gps[1] : null,
              }
            }).catch(err => {
              console.warn('üì± Notification failed:', err);
            });
          }
        } else {
          const message = `${res.employee} ${res.msg}`;
          
          if (typeof MobileUI !== 'undefined') {
            MobileUI.toast.warning(res.msg);
          } else {
            $('#message').html(message);
            document.getElementById("message").className = "alert alert-warning";
          }
          
          clearForm();
        }
      },
      error: function(xhr, status, error) {
        if (loadingToast && typeof MobileUI !== 'undefined') {
          MobileUI.toast.hide(loadingToast);
        }
        
        console.error('üì± Clock In Error:', status, error);
        
        // Check if offline
        if (!navigator.onLine) {
          if (typeof MobileUI !== 'undefined') {
            MobileUI.toast.warning('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå');
            // Store for offline sync
            storeOfflineAction('clockin', apiData);
          } else {
            $('#message').html('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå');
            document.getElementById("message").className = "alert alert-warning";
          }
        } else {
          if (typeof MobileUI !== 'undefined') {
            MobileUI.toast.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤');
          } else {
            $('#message').html('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
            document.getElementById("message").className = "alert alert-danger";
          }
        }
        
        clearForm();
      }
    });
  } else {
    if (typeof MobileUI !== 'undefined') {
      MobileUI.toast.warning('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô');
    } else {
      $('#message').html('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ...!');
      document.getElementById('message').className = 'alert alert-warning text-danger';
    }
    clearForm();
  }
}

// ‚≠ê Enhanced ClockOut with better mobile UX
function ClockOut() {
  const employee = document.getElementById("employee").value;

  if (employee != '') {
    const loadingToast = typeof MobileUI !== 'undefined' ? 
      MobileUI.toast.loading('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å...') : null;
    
    if (!loadingToast) {
      $('#message').html("<span class='spinner-border spinner-border-sm text-warning'></span> ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà ...!");
    }
    
    const clientTime = getClientTime();
    
    const apiData = {
      employee,
      lat: gps ? gps[0] : null,
      lon: gps ? gps[1] : null,
      client_time: clientTime
    };
    
    if (profile) {
      apiData.line_name = profile.displayName;
      apiData.line_picture = profile.pictureUrl;
    }
    
    console.group('üì± Clock Out Request');
    console.log('API Data:', apiData);
    console.log('Network Status:', navigator.onLine ? 'Online' : 'Offline');
    console.groupEnd();
    
    optimizedAjax({
      method: 'POST',
      url: scripturl + "/clockout",
      data: apiData,
      timeout: 15000,
      success: function (res) {
        if (loadingToast && typeof MobileUI !== 'undefined') {
          MobileUI.toast.hide(loadingToast);
        }
        
        console.group('üì± Clock Out Response');
        console.log('Server Response:', res);
        console.groupEnd();
        
        if (res.msg == 'SUCCESS') {
          const message = `${res.employee}<br>‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏•‡∏±‡∏ö ${res.return_date}`;
          
          if (typeof MobileUI !== 'undefined') {
            MobileUI.toast.success(`‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å ${res.return_date} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`);
            
            // Update status display if available
            if (window.timeTrackerApp && window.timeTrackerApp.statusDisplay) {
              window.timeTrackerApp.updateEmployeeStatus(employee);
            }
          } else {
            $('#message').html(message);
            document.getElementById("message").className = "alert alert-primary";
          }
          
          clearForm();
          
          // Send notification
          if (profile) {
            optimizedAjax({
              method: 'POST',
              url: scripturl + "/sendnotify",
              data: {
                message: res.message,
                token: res.token,
                lat: gps ? gps[0] : null,
                lon: gps ? gps[1] : null,
              }
            }).catch(err => {
              console.warn('üì± Notification failed:', err);
            });
          }
        } else {
          const message = `${res.employee} ${res.msg}`;
          
          if (typeof MobileUI !== 'undefined') {
            MobileUI.toast.warning(res.msg);
          } else {
            $('#message').html(message);
            document.getElementById("message").className = "alert alert-warning";
          }
          
          clearForm();
        }
      },
      error: function(xhr, status, error) {
        if (loadingToast && typeof MobileUI !== 'undefined') {
          MobileUI.toast.hide(loadingToast);
        }
        
        console.error('üì± Clock Out Error:', status, error);
        
        if (!navigator.onLine) {
          if (typeof MobileUI !== 'undefined') {
            MobileUI.toast.warning('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå');
            storeOfflineAction('clockout', apiData);
          } else {
            $('#message').html('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå');
            document.getElementById("message").className = "alert alert-warning";
          }
        } else {
          if (typeof MobileUI !== 'undefined') {
            MobileUI.toast.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å');
          } else {
            $('#message').html('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
            document.getElementById("message").className = "alert alert-danger";
          }
        }
        
        clearForm();
      }
    });
  } else {
    if (typeof MobileUI !== 'undefined') {
      MobileUI.toast.warning('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô');
    } else {
      $('#message').html("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ...!");
      document.getElementById("message").className = "alert alert-warning text-danger";
    }
    clearForm();
  }
}

// ‚≠ê Store offline actions for sync later
function storeOfflineAction(type, data) {
  try {
    const offlineActions = JSON.parse(localStorage.getItem('offline_actions') || '[]');
    offlineActions.push({
      type: type,
      data: data,
      timestamp: Date.now(),
      id: Date.now() + Math.random()
    });
    localStorage.setItem('offline_actions', JSON.stringify(offlineActions));
    console.log('üì± Stored offline action:', type);
  } catch (error) {
    console.error('üì± Failed to store offline action:', error);
  }
}

// ‚≠ê Sync offline actions when online
function syncOfflineActions() {
  if (!navigator.onLine) return;
  
  try {
    const offlineActions = JSON.parse(localStorage.getItem('offline_actions') || '[]');
    if (offlineActions.length === 0) return;
    
    console.log(`üì± Syncing ${offlineActions.length} offline actions...`);
    
    const promises = offlineActions.map(action => {
      const endpoint = action.type === 'clockin' ? '/clockin' : '/clockout';
      
      return optimizedAjax({
        method: 'POST',
        url: scripturl + endpoint,
        data: action.data,
        timeout: 10000
      }).then(() => {
        return action.id; // Return ID for removal
      }).catch(error => {
        console.error('üì± Failed to sync offline action:', error);
        return null;
      });
    });
    
    Promise.allSettled(promises).then(results => {
      const syncedIds = results
        .filter(result => result.status === 'fulfilled' && result.value)
        .map(result => result.value);
      
      if (syncedIds.length > 0) {
        // Remove synced actions
        const remainingActions = offlineActions.filter(action => !syncedIds.includes(action.id));
        localStorage.setItem('offline_actions', JSON.stringify(remainingActions));
        
        if (typeof MobileUI !== 'undefined') {
          MobileUI.toast.success(`‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå ${syncedIds.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`);
        }
        
        console.log(`üì± Synced ${syncedIds.length} offline actions`);
      }
    });
    
  } catch (error) {
    console.error('üì± Error syncing offline actions:', error);
  }
}

// ‚≠ê Enhanced geolocation with timeout and fallback
function getlocation(forceUpdate = false, callback = null) {
  if (!forceUpdate && gps) {
    console.log("üì± Using cached GPS coordinates:", gps);
    if (callback) callback(true);
    return;
  }
  
  if (!navigator.geolocation) {
    console.error("üì± Geolocation not supported");
    if (callback) callback(false);
    return;
  }
  
  const timeoutMs = 8000; // Reduce timeout for mobile
  const options = {
    enableHighAccuracy: true,
    timeout: timeoutMs,
    maximumAge: 30000 // Accept 30s old position
  };
  
  const timeoutId = setTimeout(() => {
    console.warn("üì± Geolocation timeout, trying IP fallback");
    getLocationFromApi(callback);
  }, timeoutMs + 1000);
  
  navigator.geolocation.getCurrentPosition(
    function(position) {
      clearTimeout(timeoutId);
      
      const lat = position.coords.latitude;
      const lon = position.coords.longitude;
      gps = [lat, lon];
      
      console.log("üì± Geolocation success:", lat, lon);
      locationPermissionGranted = true;
      
      if (callback) callback(true);
    },
    function(error) {
      clearTimeout(timeoutId);
      console.error("üì± Geolocation error:", error.code, error.message);
      
      // Try IP-based location as fallback
      getLocationFromApi(callback);
    },
    options
  );
}

// ‚≠ê Enhanced IP-based location with better error handling
function getLocationFromApi(callback = null) {
  const apis = [
    'https://ipapi.co/json/',
    'https://ip-api.com/json/',
    'https://ipinfo.io/json'
  ];
  
  let apiIndex = 0;
  
  function tryNextApi() {
    if (apiIndex >= apis.length) {
      console.error("üì± All location APIs failed");
      if (callback) callback(false);
      return;
    }
    
    const api = apis[apiIndex++];
    console.log(`üì± Trying location API: ${api}`);
    
    $.ajax({
      url: api,
      timeout: 5000,
      success: function(data) {
        let lat, lon;
        
        if (data.latitude && data.longitude) {
          lat = data.latitude;
          lon = data.longitude;
        } else if (data.lat && data.lon) {
          lat = data.lat;
          lon = data.lon;
        } else if (data.loc) {
          [lat, lon] = data.loc.split(',').map(Number);
        }
        
        if (lat && lon) {
          gps = [lat, lon];
          console.log("üì± IP location success:", lat, lon);
          if (callback) callback(true);
        } else {
          tryNextApi();
        }
      },
      error: function() {
        console.warn(`üì± API ${api} failed, trying next...`);
        tryNextApi();
      }
    });
  }
  
  tryNextApi();
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡πâ‡∏≤‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏° (‡πÄ‡∏î‡∏¥‡∏°)
function clearForm() {
  setTimeout(function () {
    document.getElementById('message').innerText = owner;
    document.getElementById("message").className = "alert msgBg";
    document.getElementById("myForm").reset();
  }, 5000);
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤ (‡πÄ‡∏î‡∏¥‡∏° ‡πÅ‡∏ï‡πà‡πÄ‡∏û‡∏¥‡πà‡∏° performance optimization)
function showTime() {
  const date = new Date();
  let h = date.getHours();
  let m = date.getMinutes();
  let s = date.getSeconds();
  
  // ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏à‡∏∏‡∏î‡∏Å‡∏£‡∏∞‡∏û‡∏£‡∏¥‡∏ö
  const dot = s % 2 === 1 ? '.' : '\xa0';
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏° 0 ‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
  h = h.toString().padStart(2, '0');
  m = m.toString().padStart(2, '0');
  s = s.toString().padStart(2, '0');
  
  const time = `${h}:${m}:${s}${dot}`;
  const clockElement = document.getElementById("MyClockDisplay");
  
  if (clockElement) {
    clockElement.textContent = time;
  }
  
  // ‡πÉ‡∏ä‡πâ requestAnimationFrame ‡πÅ‡∏ó‡∏ô setTimeout ‡πÄ‡∏û‡∏∑‡πà‡∏≠ performance ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô
  requestAnimationFrame(() => {
    setTimeout(showTime, 1000);
  });
}

// ‚≠ê Auto sync offline actions when online
window.addEventListener('online', () => {
  console.log('üì± Device back online, syncing offline actions...');
  setTimeout(syncOfflineActions, 1000); // Wait a bit for connection to stabilize
});

// ‚≠ê Initial sync check on page load
$(document).ready(function() {
  setTimeout(() => {
    if (navigator.onLine) {
      syncOfflineActions();
    }
  }, 3000); // Wait for app to initialize
});